import unittest

from http import HTTPStatus
from uuid import UUID, uuid4

from file_upload_endpoint import create_app


class MiddlewareTestCase(unittest.TestCase):
    def setUp(self):
        self.app = create_app('testing')
        self.app_context = self.app.app_context()
        self.app_context.push()
        self.client = self.app.test_client()

    def tearDown(self):
        self.app_context.pop()

    def test_request_id_not_client_value(self):
        # canary health check used as a stable test endpoint
        response = self.client.get('/meta/health/canary')
        self.assertEqual(response.status_code, HTTPStatus.NO_CONTENT)
        # ensure request id is a UUID
        try:
            UUID(response.headers['X-Request-ID'], version=4)
        except ValueError:
            self.fail("Request ID UUID is not valid")

    def test_request_id_single_non_unique_value(self):
        request_id = 'client-request-id'

        # canary health check used as a stable test endpoint
        response = self.client.get(
            '/meta/health/canary',
            headers={
                'x-request-id': request_id
            }
        )
        request_id_header_values = response.headers['X-Request-ID'].split(',')
        self.assertEqual(response.status_code, HTTPStatus.NO_CONTENT)
        # ensure two request IDs are returned
        self.assertEqual(len(request_id_header_values), 2)
        # ensure the first is the value we provided in the request
        self.assertEqual(request_id_header_values[0], request_id)
        # ensure the second is a UUID generated by this API
        try:
            UUID(request_id_header_values[1], version=4)
        except ValueError:
            self.fail("Second request ID should have been a UUID")

    def test_request_id_single_unique_value_uuid(self):
        request_id = uuid4()

        # canary health check used as a stable test endpoint
        response = self.client.get(
            '/meta/health/canary',
            headers={
                'x-request-id': request_id
            }
        )
        request_id_header_values = response.headers['X-Request-ID'].split(',')
        self.assertEqual(response.status_code, HTTPStatus.NO_CONTENT)
        # ensure one request ID is returned
        self.assertEqual(len(request_id_header_values), 1)
        # ensure the first is the value we provided in the request
        self.assertEqual(request_id_header_values[0], str(request_id))

    def test_request_id_single_unique_value_bas_load_balancer(self):
        request_id = 'BAS-API-LB-RV1+C0AB89535BD8D6750000'

        # canary health check used as a stable test endpoint
        response = self.client.get(
            '/meta/health/canary',
            headers={
                'x-request-id': request_id
            }
        )
        request_id_header_values = response.headers['X-Request-ID'].split(',')
        self.assertEqual(response.status_code, HTTPStatus.NO_CONTENT)
        # ensure one request ID is returned
        self.assertEqual(len(request_id_header_values), 1)
        # ensure the first is the value we provided in the request
        self.assertEqual(request_id_header_values[0], request_id)

    def test_request_id_multiple_values_all_non_unique(self):
        request_ids = [
            'client-request-id-1',
            'client-request-id-2'
        ]

        # canary health check used as a stable test endpoint
        response = self.client.get(
            '/meta/health/canary',
            headers={
                'x-request-id': f"{ request_ids[0] },{ request_ids[1] }"
            }
        )
        request_id_header_values = response.headers['X-Request-ID'].split(',')
        self.assertEqual(response.status_code, HTTPStatus.NO_CONTENT)
        # ensure three request IDs are returned
        self.assertEqual(len(request_id_header_values), 3)
        # ensure the first is the value we provided in the request
        self.assertEqual(request_id_header_values[0], request_ids[0])
        # ensure the second is the value we provided in the request
        self.assertEqual(request_id_header_values[1], request_ids[1])
        # ensure the third is a UUID generated by this API
        try:
            UUID(request_id_header_values[2], version=4)
        except ValueError:
            self.fail("Third request ID should have been a UUID")

    def test_request_id_multiple_values_all_one_unique_uuid(self):
        request_ids = [
            'client-request-id-1',
            uuid4()
        ]

        # canary health check used as a stable test endpoint
        response = self.client.get(
            '/meta/health/canary',
            headers={
                'x-request-id': f"{ request_ids[0] },{ request_ids[1] }"
            }
        )
        request_id_header_values = response.headers['X-Request-ID'].split(',')
        self.assertEqual(response.status_code, HTTPStatus.NO_CONTENT)
        # ensure two request IDs are returned
        self.assertEqual(len(request_id_header_values), 2)
        # ensure the first is the value we provided in the request
        self.assertEqual(request_id_header_values[0], request_ids[0])
        # ensure the second is the value we provided in the request
        self.assertEqual(request_id_header_values[1], str(request_ids[1]))

    def test_request_id_multiple_values_all_one_unique_bas_load_balancer(self):
        request_ids = [
            'client-request-id-1',
            'BAS-API-LB-RV1+C0AB89535BD8D6750000'
        ]

        # canary health check used as a stable test endpoint
        response = self.client.get(
            '/meta/health/canary',
            headers={
                'x-request-id': f"{ request_ids[0] },{ request_ids[1] }"
            }
        )
        request_id_header_values = response.headers['X-Request-ID'].split(',')
        self.assertEqual(response.status_code, HTTPStatus.NO_CONTENT)
        # ensure two request IDs are returned
        self.assertEqual(len(request_id_header_values), 2)
        # ensure the first is the value we provided in the request
        self.assertEqual(request_id_header_values[0], request_ids[0])
        # ensure the second is the value we provided in the request
        self.assertEqual(request_id_header_values[1], request_ids[1])
